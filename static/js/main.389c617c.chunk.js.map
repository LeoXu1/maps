{"version":3,"sources":["MapChart.js","CityResults.js","App.js","filterCities.js","index.js"],"names":["MapChart","setTooltipContent","coords","selectCity","size","geoUrl","mode","data-tip","projection","geography","geographies","map","geo","stroke","strokeWidth","fill","onMouseEnter","properties","name","onMouseLeave","style","default","outline","hover","pressed","rsmKey","id","loc","city","stateID","county","military","coordinates","concat","onClick","opacity","r","memo","CityResults","lng","lat","cty","st","ct","info","this","props","citySelect","setInfo","className","cityData","handleClick","state_id","county_name","population","React","Component","App","handleSearchChange","event","setState","state","target","value","handleCityClick","some","l","newCoords","handleCheckbox","milOnly","checked","isSelected","setContent","content","tooltip","query","selectedState","numResults","filter","searchText","stateSearch","maxResults","type","onChange","allStates","val","citiesList","toLowerCase","includes","state_name","slice","handleRemove","for","multiline","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.389c617c.chunk.js","sourcesContent":["import React, { memo } from \"react\";\r\nimport {\r\n  ZoomableGroup,\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography,\r\n  Marker\r\n} from \"react-simple-maps\";\r\n\r\nconst MapChart = ({setTooltipContent, coords, selectCity, size, mode}) => {\r\n  const geoUrl =\r\n    \"https://cdn.jsdelivr.net/npm/us-atlas@3/\"+mode+\"-10m.json\";\r\n  return (\r\n    <>\r\n      <ComposableMap data-tip='' projection=\"geoAlbersUsa\">\r\n        <ZoomableGroup>\r\n          <Geographies geography={geoUrl}>\r\n            {({ geographies }) =>\r\n              geographies.map(geo => (\r\n                <Geography\r\n                  key={geo.rsmKey}\r\n                  stroke='#aaa'\r\n                  strokeWidth='0.5'\r\n                  geography={geo}\r\n                  fill={\"#d6d6d6\"}\r\n                  onMouseEnter={() => {\r\n                    setTooltipContent(geo.properties.name);\r\n                  }}\r\n                  onMouseLeave={() => {\r\n                    setTooltipContent(\"\");\r\n                  }}\r\n                  style={{\r\n                    default: { outline: \"none\" },\r\n                    hover: { outline: \"none\", fill:\"#949494\" },\r\n                    pressed: { outline: \"none\" },\r\n                  }}\r\n                />\r\n\r\n              ))\r\n            }\r\n          </Geographies>\r\n          {coords.map(({id, loc, city, stateID, county, military}) => (\r\n            <Marker\r\n            key = {id}\r\n            coordinates={loc}\r\n            onMouseEnter={() => {\r\n              const name = city.concat(\", \",stateID,)\r\n              const mil = military === \"TRUE\"\r\n              if (mil){\r\n                setTooltipContent(<div>{name}<br />{county}<br />Military base</div>);\r\n              } else {\r\n                setTooltipContent(<div>{name}<br />{county}</div>);\r\n              }\r\n            }}\r\n            onMouseLeave={() => {\r\n              setTooltipContent(\"\");\r\n            }}\r\n            onClick={() => {\r\n              selectCity({id: id, city: city, stateID: stateID, county: county, military: military});\r\n              setTooltipContent(\"\");\r\n            }}\r\n            style={\r\n            {\r\n              default: {\r\n                opacity: 0.5\r\n              },\r\n              hover: {\r\n                opacity: 1\r\n              }\r\n            }}\r\n            >\r\n            <circle r={size} fill=\"#0079d3\" stroke=\"#000\" strokeWidth={0.1} />\r\n            </Marker>\r\n          ))}\r\n        </ZoomableGroup>\r\n      </ComposableMap>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(MapChart);\r\n","import React from 'react';\r\nimport \"./CityResults.css\"\r\n\r\nexport default class CityResults extends React.Component {\r\n\r\n  handleClick(id, lng, lat, cty, st, ct, military) {\r\n    const info = {\r\n      id: id,\r\n      loc: [lng, lat],\r\n      city: cty,\r\n      stateID: st,\r\n      county: ct,\r\n      military: military\r\n    }\r\n    this.props.citySelect(info)\r\n    this.props.setInfo(info)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"resultsList\">\r\n        {this.props.cityData.map(cityData => (\r\n          <div\r\n          key={cityData.id}\r\n          onClick={() => this.handleClick(cityData.id, cityData.lng,\r\n            cityData.lat, cityData.city, cityData.state_id,\r\n            cityData.county_name, cityData.military)}\r\n          className=\"cityEntry\">\r\n            <h5>{cityData.city}, {cityData.state_id}</h5>\r\n            <h5>{cityData.population}</h5>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport './App.css';\r\nimport \"./styles.css\";\r\nimport MapChart from \"./MapChart\";\r\nimport filterCities from \"./filterCities\"\r\nimport CityResults from \"./CityResults\"\r\nimport allStates from \"./allStates.json\"\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      mode: \"states\",\r\n      tooltip: \"\",\r\n      size: 3,\r\n      coords: [],\r\n      query: \"\",\r\n      selectedState: \"\",\r\n      numResults: 20,\r\n      milOnly: \"FALSE\",\r\n      city: \"New York\",\r\n      stateID: \"NY\",\r\n      county: \"New York\",\r\n      id: \"\",\r\n      military: \"FALSE\",\r\n      isSelected: false\r\n    };\r\n  }\r\n\r\n  handleSearchChange = event => {\r\n    this.setState({\r\n      ...this.state,\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  handleCityClick = loc => {\r\n    if (!this.state.coords.some((l) => l.id === loc.id)) {\r\n      const newCoords = this.state.coords.concat(loc)\r\n      this.setState({\r\n        coords: newCoords,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleRemove(id) {\r\n    const newCoords = this.state.coords.filter(cty => cty.id !== id)\r\n    this.setState({\r\n      coords: newCoords,\r\n      isSelected: false\r\n    });\r\n  };\r\n\r\n  handleCheckbox = event => {\r\n    this.setState({\r\n      milOnly: event.target.checked ? \"TRUE\" : \"FALSE\"\r\n    });\r\n  }\r\n\r\n  setInfo = info => {\r\n    this.setState({\r\n      city: info.city,\r\n      stateID: info.stateID,\r\n      county: info.county,\r\n      id: info.id,\r\n      military: info.military,\r\n      isSelected: true\r\n    })\r\n  }\r\n\r\n  setContent = content => {\r\n    this.setState({\r\n      tooltip: content\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"base\">\r\n        <div className=\"container\">\r\n          <h1>Search</h1>\r\n          <div className=\"header\">\r\n            <input type=\"text\" name=\"query\" onChange={this.handleSearchChange}/>\r\n            <select name=\"selectedState\" onChange={this.handleSearchChange}>\r\n              {allStates.map(state => (\r\n                <option key={state.val}>{state.id}</option>\r\n              ))}\r\n            </select>\r\n            <select name=\"numResults\" onChange={this.handleSearchChange}>\r\n              <option>20</option>\r\n              <option>50</option>\r\n              <option>75</option>\r\n              <option>100</option>\r\n            </select>\r\n            <span>Military?</span>\r\n            <input type=\"checkbox\" name=\"milOnly\" onChange={this.handleCheckbox}/>\r\n          </div>\r\n          <CityResults\r\n          citySelect={this.handleCityClick}\r\n          setInfo={this.setInfo}\r\n          cityData={filterCities(this.state.query,this.state.selectedState,this.state.numResults,\r\n                                this.state.milOnly)}\r\n          />\r\n        </div>\r\n        <div className=\"container\">\r\n        <h1>Map</h1>\r\n          {this.state.isSelected ? (\r\n            <>\r\n              <div className=\"header\">\r\n                <span>{this.state.city}, {this.state.stateID}</span>\r\n                <select name=\"mode\" onChange={this.handleSearchChange}>\r\n                  <option>states</option>\r\n                  <option>counties</option>\r\n                </select>\r\n                <button onClick={() => this.handleRemove(this.state.id)}>Delete</button>\r\n                <div className=\"form\">\r\n                  <label for=\"size\">\r\n                    Size:\r\n                  </label>\r\n                  <input type=\"number\" value={this.state.size} name=\"size\" onChange={this.handleSearchChange}/>\r\n                </div>\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <div className=\"header\">\r\n                <span>No city selected</span>\r\n                <select name=\"mode\" onChange={this.handleSearchChange}>\r\n                  <option>states</option>\r\n                  <option>counties</option>\r\n                </select>\r\n                <div className=\"form\">\r\n                  <label for=\"size\">\r\n                    Size:\r\n                  </label>\r\n                  <input type=\"number\" value={this.state.size} name=\"size\" onChange={this.handleSearchChange}/>\r\n                </div>\r\n              </div>\r\n            </>\r\n          )}\r\n          <MapChart\r\n          coords={this.state.coords}\r\n          setTooltipContent={this.setContent}\r\n          selectCity={this.setInfo}\r\n          size={this.state.size}\r\n          mode={this.state.mode}\r\n          />\r\n          <ReactTooltip multiline={true}>{this.state.tooltip}</ReactTooltip>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import citiesList from \"./citiesList.json\";\r\n\r\nexport default function filterCities(searchText, stateSearch, maxResults, milOnly) {\r\n  if (milOnly === \"FALSE\") {\r\n    if (stateSearch !== \"\") {\r\n      return citiesList\r\n        .filter(city => {\r\n          if (city.city.toLowerCase().includes(searchText.toLowerCase())\r\n              && city.state_name.toLowerCase() === stateSearch.toLowerCase()) {\r\n            return true;\r\n          }\r\n          return false;\r\n        })\r\n        .slice(0, maxResults);\r\n    }\r\n    else {\r\n      return citiesList\r\n        .filter(city => {\r\n          if (city.city.toLowerCase().includes(searchText.toLowerCase())) {\r\n            return true;\r\n          }\r\n          return false;\r\n        })\r\n        .slice(0, maxResults);\r\n    }\r\n  }\r\n  else {\r\n    if (stateSearch !== \"\") {\r\n      return citiesList\r\n        .filter(city => {\r\n          if (city.city.toLowerCase().includes(searchText.toLowerCase())\r\n              && city.state_name.toLowerCase() === stateSearch.toLowerCase()\r\n              && city.military === \"TRUE\") {\r\n            return true;\r\n          }\r\n          return false;\r\n        })\r\n        .slice(0, maxResults);\r\n    }\r\n    else {\r\n      return citiesList\r\n        .filter(city => {\r\n          if (city.city.toLowerCase().includes(searchText.toLowerCase())\r\n              && city.military === \"TRUE\") {\r\n            return true;\r\n          }\r\n          return false;\r\n        })\r\n        .slice(0, maxResults);\r\n    }\r\n  }\r\n\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App'\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n"],"sourceRoot":""}