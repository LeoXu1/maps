{"version":3,"sources":["MapChart.js","filterCities.js","CityResults.js","App.js","index.js"],"names":["MapChart","setTooltipContent","coords","data-tip","projection","geography","geographies","map","geo","stroke","strokeWidth","fill","rsmKey","coordinates","r","memo","filterCities","searchText","maxResults","citiesList","filter","city","toLowerCase","includes","slice","CityResults","lng","lat","loc","this","props","citySelect","className","cityData","onClick","handleClick","state_id","population","id","React","Component","App","handleSearchChange","event","setState","filteredCities","target","value","handleCityClick","state","content","type","onChange","rootElement","document","getElementById","ReactDOM","render"],"mappings":"su90RAYMA,EAAW,SAAC,GAAgC,EAA/BC,kBAAgC,IAAbC,EAAY,EAAZA,OACpC,OACE,mCACE,cAAC,gBAAD,CAAeC,WAAS,GAAGC,WAAW,eAAtC,SACE,eAAC,gBAAD,WACE,cAAC,cAAD,CAAaC,UAPrB,0DAOQ,SACG,qBAAGC,YACUC,KAAI,SAAAC,GAAG,OACjB,cAAC,YAAD,CAEEC,OAAO,OACPC,YAAY,MACZL,UAAWG,EACXG,KAAM,WAJDH,EAAII,cAUjB,cAAC,SAAD,CAAQC,YAAaX,EAArB,SACE,wBAAQY,EAAG,EAAGH,KAAK,mBAQhBI,iBAAKf,G,QCtCL,SAASgB,EAAaC,EAAYC,GAC/C,OAAOC,EACJC,QAAO,SAAAC,GACN,QAAIA,EAAKA,KAAKC,cAAcC,SAASN,EAAWK,kBAKjDE,MAAM,EAAGN,G,UCPOO,E,iKAEnB,SAAYC,EAAKC,GACf,IAAMC,EAAM,CAACF,EAAKC,GAClBE,KAAKC,MAAMC,WAAWH,K,oBAGxB,WAAU,IAAD,OACP,OACE,qBAAKI,UAAU,cAAf,SACGH,KAAKC,MAAMG,SAAS1B,KAAI,SAAA0B,GAAQ,OAC/B,sBAEAC,QAAS,kBAAM,EAAKC,YAAYF,EAASP,IAAKO,EAASN,MACvDK,UAAU,YAHV,UAIE,+BAAKC,EAASZ,KAAd,KAAsBY,EAASG,YAC/B,6BAAKH,EAASI,eAJXJ,EAASK,a,GAZiBC,IAAMC,WCI1BC,E,kDACnB,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IAQRY,mBAAqB,SAAAC,GACnB,EAAKC,SAAS,CACZC,eAAgB7B,EAAa2B,EAAMG,OAAOC,MAAO,OAXlC,EAgBnBC,gBAAkB,SAAApB,GAChB,EAAKgB,SAAS,CACZ1C,OAAQ0B,KAhBV,EAAKqB,MAAQ,CACXJ,eAAgB7B,EAAa,GAAI,IACjCd,OAAQ,EAAE,SAAU,SACpBgD,QAAS,IALM,E,0CAuBnB,WACE,OACE,sBAAKlB,UAAU,OAAf,UACE,sBAAKA,UAAU,YAAf,UACE,wCACA,sBAAKA,UAAU,SAAf,UACE,uBAAOmB,KAAK,OAAOC,SAAUvB,KAAKa,qBAClC,iDAEF,cAAC,EAAD,CAAaX,WAAYF,KAAKmB,gBAAiBf,SAAUJ,KAAKoB,MAAMJ,oBAEtE,sBAAKb,UAAU,YAAf,UACE,qCACA,cAAC,EAAD,CAAU9B,OAAQ2B,KAAKoB,MAAM/C,mB,GArCNqC,IAAMC,WCFjCa,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,cAAC,EAAD,IAASJ,K","file":"static/js/main.aef9266d.chunk.js","sourcesContent":["import React, { memo } from \"react\";\r\nimport {\r\n  ZoomableGroup,\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography,\r\n  Marker\r\n} from \"react-simple-maps\";\r\n\r\nconst geoUrl =\r\n  \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\r\n\r\nconst MapChart = ({setTooltipContent, coords}) => {\r\n  return (\r\n    <>\r\n      <ComposableMap data-tip=\"\" projection=\"geoAlbersUsa\">\r\n        <ZoomableGroup>\r\n          <Geographies geography={geoUrl}>\r\n            {({ geographies }) =>\r\n              geographies.map(geo => (\r\n                <Geography\r\n                  key={geo.rsmKey}\r\n                  stroke='#aaa'\r\n                  strokeWidth='0.5'\r\n                  geography={geo}\r\n                  fill={\"#d6d6d6\"}\r\n                />\r\n\r\n              ))\r\n            }\r\n          </Geographies>\r\n          <Marker coordinates={coords}>\r\n            <circle r={8} fill=\"#F53\" />\r\n          </Marker>\r\n        </ZoomableGroup>\r\n      </ComposableMap>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(MapChart);\r\n","import citiesList from \"./citiesList.json\";\r\n\r\nexport default function filterCities(searchText, maxResults) {\r\n  return citiesList\r\n    .filter(city => {\r\n      if (city.city.toLowerCase().includes(searchText.toLowerCase())) {\r\n        return true;\r\n      }\r\n      return false;\r\n    })\r\n    .slice(0, maxResults);\r\n}\r\n","import React from 'react';\r\nimport \"./CityResults.css\"\r\n\r\nexport default class CityResults extends React.Component {\r\n\r\n  handleClick(lng, lat) {\r\n    const loc = [lng, lat]\r\n    this.props.citySelect(loc)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"resultsList\">\r\n        {this.props.cityData.map(cityData => (\r\n          <div\r\n          key={cityData.id}\r\n          onClick={() => this.handleClick(cityData.lng, cityData.lat)}\r\n          className=\"cityEntry\">\r\n            <h5>{cityData.city}, {cityData.state_id}</h5>\r\n            <h5>{cityData.population}</h5>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport './App.css';\nimport \"./styles.css\";\nimport MapChart from \"./MapChart\";\nimport filterCities from \"./filterCities\"\nimport CityResults from \"./CityResults\"\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filteredCities: filterCities(\"\", 20),\n      coords: [-149.1091, 61.1508],\n      content: \"\"\n    };\n  }\n\n  handleSearchChange = event => {\n    this.setState({\n      filteredCities: filterCities(event.target.value, 20)\n    });\n  };\n\n\n  handleCityClick = loc => {\n    this.setState({\n      coords: loc\n    });\n  };\n\n\n  render() {\n    return (\n      <div className=\"base\">\n        <div className=\"container\">\n          <h1>Search</h1>\n          <div className=\"header\">\n            <input type=\"text\" onChange={this.handleSearchChange}/>\n            <span>Population</span>\n          </div>\n          <CityResults citySelect={this.handleCityClick} cityData={this.state.filteredCities} />\n        </div>\n        <div className=\"container\">\n          <h1>Map</h1>\n          <MapChart coords={this.state.coords}/>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}