{"version":3,"sources":["MapChart.js","CityResults.js","App.js","filterCities.js","index.js"],"names":["MapChart","setTooltipContent","coords","selectCity","size","mode","selected","mapClick","geoUrl","data-tip","projection","geography","geographies","map","geo","stroke","strokeWidth","fill","onMouseEnter","properties","name","state","onMouseLeave","onClick","info","county","style","default","outline","hover","pressed","rsmKey","id","loc","city","stateID","military","coordinates","concat","opacity","r","memo","CityResults","lng","lat","cty","st","ct","this","props","citySelect","setInfo","className","cityData","handleClick","ID","LONGITUDE","LATITUDE","CITY","STATE_CODE","COUNTY","React","Component","App","handleSizeChange","event","setState","target","value","handleStateChange","selectedState","selectedCounty","handleSearchChange","handleCityClick","some","l","newCoords","localStorage","setItem","JSON","stringify","handleMapClick","query","isSelected","setContent","content","tooltip","numResults","cities","getItem","parse","err","filter","removeItem","searchText","stateSearch","countySearch","maxResults","onChange","allStates","val","countiesList","state_name","county_name","fips","type","placeholder","step","clearSearch","citiesList","toLowerCase","includes","STATE_NAME","slice","handleRemove","min","max","for","clear","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.f5ac8782.chunk.js","sourcesContent":["import React, { memo } from \"react\";\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker\n} from \"react-simple-maps\";\n\nconst MapChart = ({setTooltipContent,\n  coords, selectCity, size, mode, selected, mapClick}) => {\n  const geoUrl =\n    \"https://raw.githubusercontent.com/LeoXu1/counties-with-states-topojson/main/\"+mode+\"TopoJson.json\";\n\n  return (\n    <>\n      <ComposableMap data-tip='' projection=\"geoAlbersUsa\">\n        <ZoomableGroup>\n          <Geographies geography={geoUrl}>\n            {({ geographies }) =>\n              geographies.map(geo => (\n                <Geography\n                  key={geo.rsmKey}\n                  stroke='#aaa'\n                  strokeWidth='0.5'\n                  geography={geo}\n                  fill={\"#d6d6d6\"}\n                  onMouseEnter={() => {\n                    if (mode === \"counties\") {\n                      setTooltipContent(geo.properties.name+\", \"+geo.properties.state);\n                    }\n                    else {\n                      setTooltipContent(geo.properties.name);\n                    }\n                  }}\n                  onMouseLeave={() => {\n                    setTooltipContent(\"Mouse over a state, county, or city.\");\n                  }}\n                  onClick={() => {\n                    if (mode === \"counties\") {\n                      const info = {\n                        state: geo.properties.state,\n                        county: geo.properties.name,\n                      }\n                      mapClick(info)\n                    }\n                    else {\n                      const info = {\n                        state: geo.properties.name,\n                        county: \"\",\n                      }\n                      mapClick(info)\n                    }\n                  }}\n                  style={{\n                    default: { outline: \"none\" },\n                    hover: { outline: \"none\", fill:\"#949494\" },\n                    pressed: { outline: \"none\" },\n                  }}\n                />\n\n              ))\n            }\n          </Geographies>\n          {coords.map(({id, loc, city, stateID, county, military}) => (\n            <Marker\n            key = {id}\n            coordinates={loc}\n            onMouseEnter={() => {\n              const name = city.concat(\", \",stateID,)\n              const mil = military === \"TRUE\"\n              if (mil){\n                setTooltipContent(<div>{name}<br />{county}<br />Military base</div>);\n              } else {\n                setTooltipContent(<div>{name} ({county})</div>);\n              }\n            }}\n            onMouseLeave={() => {\n              setTooltipContent(\"Mouse over a state, county, or city.\");\n            }}\n            onClick={() => {\n              selectCity({id: id, city: city, stateID: stateID, county: county, military: military});\n              setTooltipContent(\"\");\n            }}\n            style={\n            {\n              default: {\n                opacity: 0.5\n              },\n              hover: {\n                opacity: 1\n              }\n            }}\n            >\n            {id === selected ?\n              <circle r={size} fill=\"#FFD700\" stroke=\"#000\" strokeWidth={0.1} /> :\n              <circle r={size} fill=\"#0079d3\" stroke=\"#000\" strokeWidth={0.1} />\n\n            }\n\n            </Marker>\n          ))}\n        </ZoomableGroup>\n      </ComposableMap>\n    </>\n  );\n};\n\nexport default memo(MapChart);\n","import React from 'react';\nimport \"./CityResults.css\"\n\nexport default class CityResults extends React.Component {\n\n  handleClick(id, lng, lat, cty, st, ct) {\n    const info = {\n      id: id,\n      loc: [lng, lat],\n      city: cty,\n      stateID: st,\n      county: ct,\n    }\n    this.props.citySelect(info)\n    this.props.setInfo(info)\n  }\n\n  render() {\n    return (\n      <div className=\"resultsList\">\n        {this.props.cityData.map(cityData => (\n          <div\n          key={cityData.ID}\n          onClick={() => this.handleClick(cityData.ID, cityData.LONGITUDE,\n            cityData.LATITUDE, cityData.CITY, cityData.STATE_CODE,\n            cityData.COUNTY)}\n          className=\"cityEntry\">\n            <h4>{cityData.CITY}, {cityData.STATE_CODE}</h4>\n            <h4>{cityData.COUNTY}</h4>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport './App.css';\nimport \"./styles.css\";\nimport MapChart from \"./MapChart\";\nimport filterCities from \"./filterCities\"\nimport CityResults from \"./CityResults\"\nimport allStates from \"./data/allStates.json\"\nimport countiesList from \"./data/countiesList\"\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mode: \"states\",\n      tooltip: \"Mouse over a state, county, or city.\",\n      size: 3,\n      coords: [],\n      query: \"\",\n      selectedState: \"\",\n      selectedCounty: \"\",\n      numResults: 20,\n      city: \"New York\",\n      stateID: \"NY\",\n      county: \"New York\",\n      id: \"\",\n      isSelected: false\n    };\n  }\n\n  componentDidMount() {\n    if (!localStorage) {\n      this.setState({\n        coords: []\n      })\n    }\n    else {\n      try {\n        const cities = localStorage.getItem('cities') || ''\n        this.setState({\n          coords: JSON.parse(cities)\n        })\n      }\n      catch (err) {\n        this.setState({\n          coords: []\n        })\n      }\n\n    }\n\n  }\n\n  handleSizeChange = event => {\n    this.setState({\n      size: event.target.value\n    })\n  }\n\n  handleStateChange = event => {\n    if (event.target.value === \"Select state\") {\n      this.setState({\n        selectedState: \"\",\n        selectedCounty: \"\"\n      })\n    }\n    else {\n      this.setState({\n        selectedState: event.target.value,\n        selectedCounty: \"\"\n      })\n    }\n  }\n\n  handleSearchChange = event => {\n    if (event.target.name === \"selectedCounty\" && event.target.value === \"Select county\") {\n      this.setState({\n        ...this.state,\n        selectedCounty: \"\"\n      });\n    }\n    else {\n      this.setState({\n        ...this.state,\n        [event.target.name]: event.target.value\n      });\n    }\n  };\n\n  handleCityClick = loc => {\n    if (!this.state.coords.some((l) => l.id === loc.id)) {\n      const newCoords = this.state.coords.concat(loc)\n      this.setState({\n        coords: newCoords,\n      });\n      localStorage.setItem(\"cities\", JSON.stringify(newCoords))\n    }\n  };\n\n  handleMapClick = info => {\n    this.setState({\n      selectedState: info.state,\n      selectedCounty: info.county,\n      query: \"\"\n    });\n  }\n\n  handleRemove(id) {\n    const newCoords = this.state.coords.filter(cty => cty.id !== id)\n    this.setState({\n      coords: newCoords,\n      isSelected: false\n    });\n    localStorage.setItem(\"cities\", JSON.stringify(newCoords))\n  };\n\n  setInfo = info => {\n    this.setState({\n      city: info.city,\n      stateID: info.stateID,\n      county: info.county,\n      id: info.id,\n      isSelected: true\n    });\n  }\n\n  setContent = content => {\n    this.setState({\n      tooltip: content\n    })\n  }\n\n  clear() {\n    localStorage.removeItem(\"cities\");\n    this.setState({\n      coords: [],\n      isSelected: false\n    })\n  }\n\n  clearSearch() {\n    this.setState({\n      query: \"\",\n      selectedState: \"\",\n      selectedCounty: \"\"\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"base\">\n        <div className=\"container\">\n          <div className=\"header\">\n            <select name=\"selectedState\" value={this.state.selectedState} onChange={this.handleStateChange}>\n              {allStates.map(state => (\n                <option key={state.val}>{state.id}</option>\n              ))}\n            </select>\n            {this.state.selectedState === \"\" ? (\n              null\n            ) : (\n              <>\n                <select name=\"selectedCounty\" value={this.state.selectedCounty} onChange={this.handleSearchChange}>\n                  {countiesList.filter(county => county.state_name === this.state.selectedState)\n                    .map(county => (\n                    <option key={county.fips}>{county.county_name}</option>\n                  ))}\n                </select>\n              </>\n            )}\n            <input type=\"text\" placeholder=\"Search city\" value={this.state.query} name=\"query\" onChange={this.handleSearchChange}/>\n            <input type=\"number\" step={10} value={this.state.numResults} name=\"numResults\" onChange={this.handleSearchChange} />\n          </div>\n          <div className=\"header\">\n            <button onClick={()=>this.clearSearch()}>Clear Search</button>\n          </div>\n          <CityResults\n          citySelect={this.handleCityClick}\n          setInfo={this.setInfo}\n          cityData={filterCities(this.state.query,this.state.selectedState, this.state.selectedCounty,\n            this.state.numResults)}\n          />\n        </div>\n        <div className=\"container\">\n          {this.state.isSelected ? (\n            <>\n              <div className=\"header\">\n                <span>{this.state.city}, {this.state.stateID}</span>\n                <select name=\"mode\" onChange={this.handleSearchChange}>\n                  <option>states</option>\n                  <option>counties</option>\n                </select>\n                <button onClick={() => this.handleRemove(this.state.id)}>Delete</button>\n                <div className=\"form\">\n                  <label>Size: </label>\n                  <input type=\"range\" id=\"size\" value={this.state.size} name=\"size\" min=\"1\" max=\"20\" onChange={this.handleSizeChange}/>\n                </div>\n              </div>\n            </>\n          ) : (\n            <>\n              <div className=\"header\">\n                <select name=\"mode\" onChange={this.handleSearchChange}>\n                  <option>states</option>\n                  <option>counties</option>\n                </select>\n                <div className=\"form\">\n                  <label for=\"size\">Size: </label>\n                  <input type=\"range\" id=\"size\" value={this.state.size} name=\"size\" min=\"1\" max=\"20\" onChange={this.handleSizeChange}/>\n                </div>\n              </div>\n            </>\n          )}\n          <div className=\"header\">\n            <h5>{this.state.tooltip}</h5>\n            <button onClick={()=>this.clear()}>Clear Cities</button>\n          </div>\n          <MapChart\n            coords={this.state.coords}\n            setTooltipContent={this.setContent}\n            selectCity={this.setInfo}\n            size={this.state.size}\n            mode={this.state.mode}\n            selected={this.state.id}\n            mapClick={this.handleMapClick}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import citiesList from \"./data/citiesList.json\";\n\nexport default function filterCities(searchText, stateSearch, countySearch, maxResults) {\n  if (stateSearch !== \"\") {\n    if (countySearch !== \"\") {\n      return citiesList\n        .filter(city => {\n          if (city.CITY.toLowerCase().includes(searchText.toLowerCase())\n              && city.STATE_NAME.toLowerCase() === stateSearch.toLowerCase()\n              && countySearch.toLowerCase() === city.COUNTY.toLowerCase()) {\n            return true;\n          }\n          return false;\n        })\n        .slice(0, maxResults);\n    }\n    else {\n      return citiesList\n        .filter(city => {\n          if (city.CITY.toLowerCase().includes(searchText.toLowerCase())\n              && city.STATE_NAME.toLowerCase() === stateSearch.toLowerCase()) {\n            return true;\n          }\n          return false;\n        })\n        .slice(0, maxResults);\n    }\n\n  }\n  else {\n    return citiesList\n      .filter(city => {\n        if (city.CITY.toLowerCase().includes(searchText.toLowerCase())) {\n          return true;\n        }\n        return false;\n      })\n      .slice(0, maxResults);\n  }\n\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}