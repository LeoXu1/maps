{"version":3,"sources":["MapChart.js","CityResults.js","App.js","filterCities.js","index.js"],"names":["MapChart","setTooltipContent","defaultTooltip","coords","selectCity","size","mode","selected","mapClick","geoUrl","data-tip","projection","geography","geographies","map","geo","stroke","strokeWidth","fill","onMouseEnter","properties","name","state","onMouseLeave","onClick","info","county","style","default","outline","hover","pressed","rsmKey","id","loc","city","stateID","coordinates","concat","opacity","r","memo","CityResults","lng","lat","cty","st","ct","this","props","citySelect","setInfo","className","cityData","handleClick","ID","LONGITUDE","LATITUDE","CITY","STATE_CODE","COUNTY","showMore","React","Component","App","handleSizeChange","event","setState","target","value","handleStateChange","numResults","selectedState","selectedCounty","handleSearchChange","handleCityClick","tooltip","some","l","newCoords","localStorage","setItem","JSON","stringify","handleMapClick","query","isSelected","setContent","content","mapStates","cities","getItem","parse","err","filter","removeItem","searchText","stateSearch","countySearch","maxResults","handleRemove","clear","type","min","max","onChange","placeholder","allStates","val","countiesList","state_name","county_name","fips","citiesList","toLowerCase","includes","STATE_NAME","slice","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.991b1e9d.chunk.js","sourcesContent":["import React, { memo } from \"react\";\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker\n} from \"react-simple-maps\";\n\nconst MapChart = ({setTooltipContent, defaultTooltip,\n  coords, selectCity, size, mode, selected, mapClick}) => {\n  var geoUrl = \"https://raw.githubusercontent.com/LeoXu1/counties-with-states-topojson/main/\"\n  if (mode === true) {\n    geoUrl = geoUrl + \"statesTopoJson.json\";\n  }\n  else {\n    geoUrl = geoUrl + \"countiesTopoJson.json\";\n  }\n  return (\n    <>\n      <ComposableMap data-tip='' projection=\"geoAlbersUsa\">\n        <ZoomableGroup>\n          <Geographies geography={geoUrl}>\n            {({ geographies }) =>\n              geographies.map(geo => (\n                <Geography\n                  key={geo.rsmKey}\n                  stroke='#aaa'\n                  strokeWidth='0.5'\n                  geography={geo}\n                  fill={\"#d6d6d6\"}\n                  onMouseEnter={() => {\n                    if (mode === false) {\n                      setTooltipContent(geo.properties.name+\" (\"+geo.properties.state+\")\");\n                    }\n                    else {\n                      setTooltipContent(geo.properties.name);\n                    }\n                  }}\n                  onMouseLeave={() => {\n                    setTooltipContent(defaultTooltip);\n                  }}\n                  onClick={() => {\n                    if (mode === false) {\n                      const info = {\n                        state: geo.properties.state,\n                        county: geo.properties.name,\n                      }\n                      mapClick(info)\n                    }\n                    else {\n                      const info = {\n                        state: geo.properties.name,\n                        county: \"\",\n                      }\n                      mapClick(info)\n                    }\n                  }}\n                  style={{\n                    default: { outline: \"none\" },\n                    hover: { outline: \"none\", fill:\"#949494\" },\n                    pressed: { outline: \"none\" },\n                  }}\n                />\n\n              ))\n            }\n          </Geographies>\n          {coords.map(({id, loc, city, stateID, county}) => (\n            <Marker\n            key = {id}\n            coordinates={loc}\n            onMouseEnter={() => {\n              const name = city.concat(\", \",stateID)\n              setTooltipContent(<div>{name} ({county})</div>);\n            }}\n            onMouseLeave={() => {\n              setTooltipContent(defaultTooltip);\n            }}\n            onClick={() => {\n              selectCity({id: id, city: city, stateID: stateID, county: county});\n            }}\n            style={\n            {\n              default: {\n                opacity: 0.5\n              },\n              hover: {\n                opacity: 1\n              }\n            }}\n            >\n            {id === selected ?\n              <circle r={size} fill=\"#FFD700\" stroke=\"#000\" strokeWidth={0.1} /> :\n              <circle r={size} fill=\"#0079d3\" stroke=\"#000\" strokeWidth={0.1} />\n\n            }\n\n            </Marker>\n          ))}\n        </ZoomableGroup>\n      </ComposableMap>\n    </>\n  );\n};\n\nexport default memo(MapChart);\n","import React from 'react';\nimport \"./CityResults.css\"\n\nexport default class CityResults extends React.Component {\n\n  handleClick(id, lng, lat, cty, st, ct) {\n    const info = {\n      id: id,\n      loc: [lng, lat],\n      city: cty,\n      stateID: st,\n      county: ct,\n    }\n    this.props.citySelect(info)\n    this.props.setInfo(info)\n  }\n\n  render() {\n    return (\n      <div className=\"resultsList\">\n        {this.props.cityData.map(cityData => (\n          <div\n          key={cityData.ID}\n          onClick={() => this.handleClick(cityData.ID, cityData.LONGITUDE,\n            cityData.LATITUDE, cityData.CITY, cityData.STATE_CODE,\n            cityData.COUNTY)}\n          className=\"cityEntry\">\n            <p>{cityData.CITY}, {cityData.STATE_CODE} ({cityData.COUNTY})</p>\n          </div>\n        ))}\n        <div className='showMoreBtn' onClick={this.props.showMore}>\n          <p>Show More</p>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport './App.css';\nimport \"./styles.css\";\nimport MapChart from \"./MapChart\";\nimport filterCities from \"./filterCities\"\nimport CityResults from \"./CityResults\"\nimport allStates from \"./data/allStates.json\"\nimport countiesList from \"./data/countiesList\"\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mapStates: true,\n      tooltip: \"USA\",\n      defaultTooltip: \"USA\",\n      size: 10,\n      coords: [],\n      query: \"\",\n      selectedState: \"\",\n      selectedCounty: \"\",\n      numResults: 20,\n      city: \"New York\",\n      stateID: \"NY\",\n      county: \"New York\",\n      id: \"\",\n      isSelected: false\n    };\n  }\n\n  componentDidMount() {\n    if (!localStorage) {\n      this.setState({\n        coords: []\n      })\n    }\n    else {\n      try {\n        const cities = localStorage.getItem('cities') || ''\n        this.setState({\n          coords: JSON.parse(cities)\n        })\n      }\n      catch (err) {\n        this.setState({\n          coords: []\n        })\n      }\n\n    }\n\n  }\n\n  handleSizeChange = event => {\n    this.setState({\n      size: event.target.value\n    })\n  }\n\n  handleStateChange = event => {\n    this.setState({\n      numResults: 20\n    })\n    if (event.target.value === \"Select state\") {\n      this.setState({\n        selectedState: \"\",\n        selectedCounty: \"\"\n      })\n    }\n    else {\n      this.setState({\n        selectedState: event.target.value,\n        selectedCounty: \"\"\n      })\n    }\n  }\n\n  handleSearchChange = event => {\n    if (event.target.name === \"selectedCounty\" && event.target.value === \"Select county\") {\n      this.setState({\n        ...this.state,\n        selectedCounty: \"\",\n        numResults: 20\n      });\n    }\n    else {\n      this.setState({\n        ...this.state,\n        [event.target.name]: event.target.value,\n        numResults: 20\n      });\n    }\n  };\n\n  handleCityClick = loc => {\n    this.setState({\n      defaultTooltip: loc.city + \", \" + loc.stateID + \" (\" + loc.county + \")\",\n      tooltip: loc.city + \", \" + loc.stateID + \" (\" + loc.county + \")\"\n    });\n    if (!this.state.coords.some((l) => l.id === loc.id)) {\n      const newCoords = this.state.coords.concat(loc)\n      this.setState({\n        coords: newCoords\n      });\n      localStorage.setItem(\"cities\", JSON.stringify(newCoords))\n    }\n  };\n\n  handleMapClick = info => {\n    this.setState({\n      selectedState: info.state,\n      selectedCounty: info.county,\n      query: \"\",\n      city: \"\",\n      stateID: \"\",\n      county: \"\",\n      id: \"\",\n      isSelected: false,\n      defaultTooltip: \"USA\"\n    });\n  }\n\n  handleRemove(id) {\n    const newCoords = this.state.coords.filter(cty => cty.id !== id)\n    this.setState({\n      coords: newCoords,\n      isSelected: false,\n      defaultTooltip: \"USA\",\n      tooltip: \"USA\"\n    });\n    localStorage.setItem(\"cities\", JSON.stringify(newCoords))\n  };\n\n  setInfo = info => {\n    this.setState({\n      city: info.city,\n      stateID: info.stateID,\n      county: info.county,\n      id: info.id,\n      isSelected: true,\n      defaultTooltip: info.city + \", \" + info.stateID + \" (\" + info.county + \")\"\n    });\n  }\n\n  setContent = content => {\n    this.setState({\n      tooltip: content\n    })\n  }\n\n  clear() {\n    localStorage.removeItem(\"cities\");\n    this.setState({\n      coords: [],\n      isSelected: false,\n      defaultTooltip: \"USA\",\n      tooltip: \"USA\"\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"container\">\n          <div className=\"header\">\n            <button>Help</button>\n            {this.state.isSelected && <button onClick={() => this.handleRemove(this.state.id)}>Delete</button>}\n            <button onClick={()=>this.clear()}>Clear Cities</button>\n          </div>\n          <div className=\"header\">\n            {this.state.mapStates === true ? (\n              <button onClick={()=>this.setState({mapStates: !this.state.mapStates})}>Show counties</button>\n            ) : (\n              <button onClick={()=>this.setState({mapStates: !this.state.mapStates})}>Show states</button>\n            )}\n            <div className=\"form\">\n              <label>Size: </label>\n              <input type=\"range\" id=\"size\" value={this.state.size} name=\"size\" min=\"1\" max=\"20\" onChange={this.handleSizeChange}/>\n            </div>\n          </div>\n          <h5>{this.state.tooltip}</h5>\n          <div className=\"mapHolder\">\n            <MapChart\n              coords={this.state.coords}\n              setTooltipContent={this.setContent}\n              selectCity={this.setInfo}\n              size={this.state.size}\n              mode={this.state.mapStates}\n              selected={this.state.id}\n              mapClick={this.handleMapClick}\n              defaultTooltip={this.state.defaultTooltip}\n            />\n          </div>\n        </div>\n        <div className=\"spaceBar\">\n          <input type=\"text\" placeholder=\"Search city\" value={this.state.query} name=\"query\" onChange={this.handleSearchChange}/>\n        </div>\n        <div className=\"header\">\n          <select name=\"selectedState\" value={this.state.selectedState} onChange={this.handleStateChange}>\n            {allStates.map(state => (\n              <option key={state.val}>{state.id}</option>\n            ))}\n          </select>\n          {this.state.selectedState === \"\" ? (\n            null\n          ) : (\n            <>\n              <select name=\"selectedCounty\" value={this.state.selectedCounty} onChange={this.handleSearchChange}>\n                {countiesList.filter(county => county.state_name === this.state.selectedState)\n                  .map(county => (\n                  <option key={county.fips}>{county.county_name}</option>\n                ))}\n              </select>\n            </>\n          )}\n        </div>\n        <button onClick={() => {\n          this.setState({\n            query: \"\",\n            selectedState: \"\",\n            selectedCounty: \"\",\n            numResults: 20\n          })\n        }}>Clear Search</button>\n        <CityResults\n          citySelect={this.handleCityClick}\n          setInfo={this.setInfo}\n          cityData={filterCities(this.state.query,this.state.selectedState, this.state.selectedCounty,\n            this.state.numResults)}\n          showMore={() => this.setState({numResults: this.state.numResults + 10})}\n        />\n      </div>\n    );\n  }\n}\n","import citiesList from \"./data/citiesList.json\";\n\nexport default function filterCities(searchText, stateSearch, countySearch, maxResults) {\n  if (stateSearch !== \"\") {\n    if (countySearch !== \"\") {\n      return citiesList\n        .filter(city => {\n          if (city.CITY.toLowerCase().includes(searchText.toLowerCase())\n              && city.STATE_NAME.toLowerCase() === stateSearch.toLowerCase()\n              && countySearch.toLowerCase() === city.COUNTY.toLowerCase()) {\n            return true;\n          }\n          return false;\n        })\n        .slice(0, maxResults);\n    }\n    else {\n      return citiesList\n        .filter(city => {\n          if (city.CITY.toLowerCase().includes(searchText.toLowerCase())\n              && city.STATE_NAME.toLowerCase() === stateSearch.toLowerCase()) {\n            return true;\n          }\n          return false;\n        })\n        .slice(0, maxResults);\n    }\n\n  }\n  else {\n    return citiesList\n      .filter(city => {\n        if (city.CITY.toLowerCase().includes(searchText.toLowerCase())) {\n          return true;\n        }\n        return false;\n      })\n      .slice(0, maxResults);\n  }\n\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}