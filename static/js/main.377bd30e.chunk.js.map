{"version":3,"sources":["MapChart.js","CityResults.js","App.js","filterCities.js","index.js"],"names":["MapChart","setTooltipContent","coords","data-tip","projection","geography","geographies","map","geo","stroke","strokeWidth","fill","rsmKey","coordinates","strokeLinecap","strokeLinejoin","transform","cx","cy","r","d","memo","CityResults","lng","lat","cty","st","ct","inc","mil","loc","info","city","stateID","county","incorporated","military","this","props","citySelect","setInfo","className","cityData","onClick","handleClick","state_id","county_name","population","id","React","Component","App","handleSearchChange","event","setState","state","target","name","value","handleCityClick","handleCheckbox","milOnly","checked","query","selectedState","numResults","searchText","stateSearch","maxResults","isLAorAK","isLA","type","onChange","allStates","val","citiesList","filter","toLowerCase","includes","state_name","slice","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.377bd30e.chunk.js","sourcesContent":["import React, { memo } from \"react\";\r\nimport {\r\n  ZoomableGroup,\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography,\r\n  Marker\r\n} from \"react-simple-maps\";\r\n\r\nconst geoUrl =\r\n  \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\r\n\r\nconst MapChart = ({setTooltipContent, coords}) => {\r\n  return (\r\n    <>\r\n      <ComposableMap data-tip=\"\" projection=\"geoAlbersUsa\">\r\n        <ZoomableGroup>\r\n          <Geographies geography={geoUrl}>\r\n            {({ geographies }) =>\r\n              geographies.map(geo => (\r\n                <Geography\r\n                  key={geo.rsmKey}\r\n                  stroke='#aaa'\r\n                  strokeWidth='0.5'\r\n                  geography={geo}\r\n                  fill={\"#d6d6d6\"}\r\n                />\r\n\r\n              ))\r\n            }\r\n          </Geographies>\r\n          <Marker coordinates={coords}>\r\n          <g\r\n            fill=\"none\"\r\n            stroke=\"#FF5533\"\r\n            strokeWidth=\"2\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            transform=\"translate(-12, -24)\"\r\n          >\r\n            <circle cx=\"12\" cy=\"10\" r=\"3\" />\r\n            <path d=\"M12 21.7C17.3 17 20 13 20 10a8 8 0 1 0-16 0c0 3 2.7 6.9 8 11.7z\" />\r\n          </g>\r\n          </Marker>\r\n        </ZoomableGroup>\r\n      </ComposableMap>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(MapChart);\r\n","import React from 'react';\r\nimport \"./CityResults.css\"\r\n\r\nexport default class CityResults extends React.Component {\r\n\r\n  handleClick(lng, lat, cty, st, ct, inc, mil) {\r\n    const loc = [lng, lat]\r\n    const info = {\r\n      city: cty,\r\n      stateID: st,\r\n      county: ct,\r\n      incorporated: inc,\r\n      military: mil\r\n    }\r\n    this.props.citySelect(loc)\r\n    this.props.setInfo(info)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"resultsList\">\r\n        {this.props.cityData.map(cityData => (\r\n          <div\r\n          key={cityData.id}\r\n          onClick={() => this.handleClick(cityData.lng,\r\n            cityData.lat, cityData.city, cityData.state_id,\r\n            cityData.county_name, cityData.incorporated, cityData.military)}\r\n          className=\"cityEntry\">\r\n            <h5>{cityData.city}, {cityData.state_id}</h5>\r\n            <h5>{cityData.population}</h5>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport './App.css';\r\nimport \"./styles.css\";\r\nimport MapChart from \"./MapChart\";\r\nimport filterCities from \"./filterCities\"\r\nimport CityResults from \"./CityResults\"\r\nimport allStates from \"./allStates.json\"\r\n\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      coords: [-73.9249, 40.6943],\r\n      query: \"\",\r\n      selectedState: \"\",\r\n      numResults: 20,\r\n      milOnly: \"FALSE\",\r\n      city: \"New York\",\r\n      stateID: \"NY\",\r\n      county: \"New York\",\r\n      incorporated: \"TRUE\",\r\n      military: \"FALSE\"\r\n    };\r\n  }\r\n\r\n  handleSearchChange = event => {\r\n    this.setState({\r\n      ...this.state,\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  handleCityClick = loc => {\r\n    this.setState({\r\n      coords: loc\r\n    });\r\n  };\r\n\r\n  handleCheckbox = event => {\r\n    this.setState({\r\n      milOnly: event.target.checked ? \"TRUE\" : \"FALSE\"\r\n    });\r\n  }\r\n\r\n  setInfo = info => {\r\n    this.setState({\r\n      city: info.city,\r\n      stateID: info.stateID,\r\n      county: info.county,\r\n      incorporated: info.incorporated,\r\n      military: info.military\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const isLAorAK = this.state.stateID === \"LA\" || this.state.stateID === \"AK\"\r\n    const isLA = this.state.stateID === \"LA\"\r\n    return (\r\n      <div className=\"base\">\r\n        <div className=\"container\">\r\n          <h1>Search</h1>\r\n          <div className=\"header\">\r\n            <input type=\"text\" name=\"query\" onChange={this.handleSearchChange}/>\r\n            <select name=\"selectedState\" onChange={this.handleSearchChange}>\r\n              {allStates.map(state => (\r\n                <option key={state.val}>{state.id}</option>\r\n              ))}\r\n            </select>\r\n            <select name=\"numResults\" onChange={this.handleSearchChange}>\r\n              <option>20</option>\r\n              <option>50</option>\r\n              <option>75</option>\r\n              <option>100</option>\r\n            </select>\r\n            <span>Military?</span>\r\n            <input type=\"checkbox\" name=\"milOnly\" onChange={this.handleCheckbox}/>\r\n          </div>\r\n          <CityResults\r\n          citySelect={this.handleCityClick}\r\n          setInfo={this.setInfo}\r\n          cityData={filterCities(this.state.query,this.state.selectedState,this.state.numResults,\r\n                                this.state.milOnly)}\r\n          />\r\n        </div>\r\n        <div className=\"container\">\r\n          <h1>Map</h1>\r\n          <div className=\"header\">\r\n            <span>{this.state.city}, {this.state.stateID}</span>\r\n            {isLAorAK ? isLA ? (\r\n              <>\r\n              <span>{this.state.county} Parish</span>\r\n              </>\r\n            ) : (\r\n              <>\r\n              <span>{this.state.county} Borough</span>\r\n              </>\r\n            ) : (\r\n              <>\r\n              <span>{this.state.county} County</span>\r\n              </>\r\n            )}\r\n            <span>Incorporated: {this.state.incorporated}</span>\r\n            <span>Military: {this.state.military}</span>\r\n          </div>\r\n          <MapChart coords={this.state.coords}/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import citiesList from \"./citiesList.json\";\r\n\r\nexport default function filterCities(searchText, stateSearch, maxResults, milOnly) {\r\n  if (milOnly === \"FALSE\") {\r\n    if (stateSearch !== \"\") {\r\n      return citiesList\r\n        .filter(city => {\r\n          if (city.city.toLowerCase().includes(searchText.toLowerCase())\r\n              && city.state_name.toLowerCase() === stateSearch.toLowerCase()) {\r\n            return true;\r\n          }\r\n          return false;\r\n        })\r\n        .slice(0, maxResults);\r\n    }\r\n    else {\r\n      return citiesList\r\n        .filter(city => {\r\n          if (city.city.toLowerCase().includes(searchText.toLowerCase())) {\r\n            return true;\r\n          }\r\n          return false;\r\n        })\r\n        .slice(0, maxResults);\r\n    }\r\n  }\r\n  else {\r\n    if (stateSearch !== \"\") {\r\n      return citiesList\r\n        .filter(city => {\r\n          if (city.city.toLowerCase().includes(searchText.toLowerCase())\r\n              && city.state_name.toLowerCase() === stateSearch.toLowerCase()\r\n              && city.military === \"TRUE\") {\r\n            return true;\r\n          }\r\n          return false;\r\n        })\r\n        .slice(0, maxResults);\r\n    }\r\n    else {\r\n      return citiesList\r\n        .filter(city => {\r\n          if (city.city.toLowerCase().includes(searchText.toLowerCase())\r\n              && city.military === \"TRUE\") {\r\n            return true;\r\n          }\r\n          return false;\r\n        })\r\n        .slice(0, maxResults);\r\n    }\r\n  }\r\n\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App'\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n"],"sourceRoot":""}