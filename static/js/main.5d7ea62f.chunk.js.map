{"version":3,"sources":["MapChart.js","CityResults.js","App.js","filterCities.js","index.js"],"names":["MapChart","setTooltipContent","coords","selectCity","size","data-tip","projection","geography","geographies","map","geo","stroke","strokeWidth","fill","rsmKey","id","loc","city","stateID","county","military","coordinates","onMouseEnter","name","concat","onMouseLeave","onClick","style","default","opacity","hover","r","memo","CityResults","lng","lat","cty","st","ct","info","this","props","citySelect","setInfo","className","cityData","handleClick","state_id","county_name","population","React","Component","App","handleSearchChange","event","setState","state","target","value","handleCityClick","newCoords","handleCheckbox","milOnly","checked","isSelected","setContent","content","tooltip","query","selectedState","numResults","filter","searchText","stateSearch","maxResults","isLAorAK","isLA","type","onChange","allStates","val","citiesList","toLowerCase","includes","state_name","slice","handleRemove","multiline","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.5d7ea62f.chunk.js","sourcesContent":["import React, { memo } from \"react\";\r\nimport {\r\n  ZoomableGroup,\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography,\r\n  Marker\r\n} from \"react-simple-maps\";\r\n\r\nconst geoUrl =\r\n  \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\r\n\r\nconst MapChart = ({setTooltipContent, coords, selectCity, size}) => {\r\n  return (\r\n    <>\r\n      <ComposableMap data-tip='' projection=\"geoAlbersUsa\">\r\n        <ZoomableGroup>\r\n          <Geographies geography={geoUrl}>\r\n            {({ geographies }) =>\r\n              geographies.map(geo => (\r\n                <Geography\r\n                  key={geo.rsmKey}\r\n                  stroke='#aaa'\r\n                  strokeWidth='0.5'\r\n                  geography={geo}\r\n                  fill={\"#d6d6d6\"}\r\n                />\r\n\r\n              ))\r\n            }\r\n          </Geographies>\r\n          {coords.map(({id, loc, city, stateID, county, military}) => (\r\n            <Marker\r\n            key = {id}\r\n            coordinates={loc}\r\n            onMouseEnter={() => {\r\n              const name = city.concat(\", \",stateID,'&#013;',county)\r\n              setTooltipContent(name);\r\n            }}\r\n            onMouseLeave={() => {\r\n              setTooltipContent(\"\");\r\n            }}\r\n            onClick={() => {\r\n              selectCity({id: id, city: city, stateID: stateID, county: county, military: military});\r\n              setTooltipContent(\"\");\r\n            }}\r\n            style={\r\n            {\r\n              default: {\r\n                opacity: 0.5\r\n              },\r\n              hover: {\r\n                opacity: 1\r\n              }\r\n            }}\r\n            >\r\n            <circle r={size} fill=\"#0079d3\" stroke=\"#000\" strokeWidth={0.5} />\r\n            </Marker>\r\n          ))}\r\n        </ZoomableGroup>\r\n      </ComposableMap>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(MapChart);\r\n","import React from 'react';\r\nimport \"./CityResults.css\"\r\n\r\nexport default class CityResults extends React.Component {\r\n\r\n  handleClick(id, lng, lat, cty, st, ct, military) {\r\n    const info = {\r\n      id: id,\r\n      loc: [lng, lat],\r\n      city: cty,\r\n      stateID: st,\r\n      county: ct,\r\n      military: military\r\n    }\r\n    this.props.citySelect(info)\r\n    this.props.setInfo(info)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"resultsList\">\r\n        {this.props.cityData.map(cityData => (\r\n          <div\r\n          key={cityData.id}\r\n          onClick={() => this.handleClick(cityData.id, cityData.lng,\r\n            cityData.lat, cityData.city, cityData.state_id,\r\n            cityData.county_name, cityData.military)}\r\n          className=\"cityEntry\">\r\n            <h5>{cityData.city}, {cityData.state_id}</h5>\r\n            <h5>{cityData.population}</h5>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport './App.css';\r\nimport \"./styles.css\";\r\nimport MapChart from \"./MapChart\";\r\nimport filterCities from \"./filterCities\"\r\nimport CityResults from \"./CityResults\"\r\nimport allStates from \"./allStates.json\"\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tooltip: \"\",\r\n      coords: [],\r\n      query: \"\",\r\n      selectedState: \"\",\r\n      numResults: 20,\r\n      milOnly: \"FALSE\",\r\n      city: \"New York\",\r\n      stateID: \"NY\",\r\n      county: \"New York\",\r\n      id: \"\",\r\n      military: \"FALSE\",\r\n      isSelected: false\r\n    };\r\n  }\r\n\r\n  handleSearchChange = event => {\r\n    this.setState({\r\n      ...this.state,\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  handleCityClick = loc => {\r\n    const newCoords = this.state.coords.concat(loc)\r\n    this.setState({\r\n      coords: newCoords,\r\n    });\r\n  };\r\n\r\n  handleRemove(id) {\r\n    const newCoords = this.state.coords.filter(cty => cty.id !== id)\r\n    this.setState({\r\n      coords: newCoords,\r\n      isSelected: false\r\n    });\r\n  };\r\n\r\n  handleCheckbox = event => {\r\n    this.setState({\r\n      milOnly: event.target.checked ? \"TRUE\" : \"FALSE\"\r\n    });\r\n  }\r\n\r\n  setInfo = info => {\r\n    this.setState({\r\n      city: info.city,\r\n      stateID: info.stateID,\r\n      county: info.county,\r\n      id: info.id,\r\n      military: info.military,\r\n      isSelected: true\r\n    })\r\n  }\r\n\r\n  setContent = content => {\r\n    this.setState({\r\n      tooltip: content\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const isLAorAK = this.state.stateID === \"LA\" || this.state.stateID === \"AK\"\r\n    const isLA = this.state.stateID === \"LA\"\r\n    return (\r\n      <div className=\"base\">\r\n        <div className=\"container\">\r\n          <h1>Search</h1>\r\n          <div className=\"header\">\r\n            <input type=\"text\" name=\"query\" onChange={this.handleSearchChange}/>\r\n            <select name=\"selectedState\" onChange={this.handleSearchChange}>\r\n              {allStates.map(state => (\r\n                <option key={state.val}>{state.id}</option>\r\n              ))}\r\n            </select>\r\n            <select name=\"numResults\" onChange={this.handleSearchChange}>\r\n              <option>20</option>\r\n              <option>50</option>\r\n              <option>75</option>\r\n              <option>100</option>\r\n            </select>\r\n            <span>Military?</span>\r\n            <input type=\"checkbox\" name=\"milOnly\" onChange={this.handleCheckbox}/>\r\n          </div>\r\n          <CityResults\r\n          citySelect={this.handleCityClick}\r\n          setInfo={this.setInfo}\r\n          cityData={filterCities(this.state.query,this.state.selectedState,this.state.numResults,\r\n                                this.state.milOnly)}\r\n          />\r\n        </div>\r\n        <div className=\"container\">\r\n          <h1>Map</h1>\r\n          {this.state.isSelected ? (\r\n            <>\r\n              <div className=\"header\">\r\n                <span>{this.state.city}, {this.state.stateID}</span>\r\n                {isLAorAK ? isLA ? (\r\n                  <>\r\n                  <span>{this.state.county} Parish</span>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                  <span>{this.state.county} Borough</span>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                  <span>{this.state.county} County</span>\r\n                  </>\r\n                )}\r\n                <span>Military: {this.state.military}</span>\r\n                <button onClick={() => this.handleRemove(this.state.id)}>Delete</button>\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <div className=\"header\">\r\n                <span>No city selected</span>\r\n              </div>\r\n            </>\r\n          )}\r\n          <MapChart\r\n          coords={this.state.coords}\r\n          setTooltipContent={this.setContent}\r\n          selectCity={this.setInfo}\r\n          size={3}\r\n          />\r\n          <ReactTooltip multiline={true}>{this.state.tooltip}</ReactTooltip>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import citiesList from \"./citiesList.json\";\r\n\r\nexport default function filterCities(searchText, stateSearch, maxResults, milOnly) {\r\n  if (milOnly === \"FALSE\") {\r\n    if (stateSearch !== \"\") {\r\n      return citiesList\r\n        .filter(city => {\r\n          if (city.city.toLowerCase().includes(searchText.toLowerCase())\r\n              && city.state_name.toLowerCase() === stateSearch.toLowerCase()) {\r\n            return true;\r\n          }\r\n          return false;\r\n        })\r\n        .slice(0, maxResults);\r\n    }\r\n    else {\r\n      return citiesList\r\n        .filter(city => {\r\n          if (city.city.toLowerCase().includes(searchText.toLowerCase())) {\r\n            return true;\r\n          }\r\n          return false;\r\n        })\r\n        .slice(0, maxResults);\r\n    }\r\n  }\r\n  else {\r\n    if (stateSearch !== \"\") {\r\n      return citiesList\r\n        .filter(city => {\r\n          if (city.city.toLowerCase().includes(searchText.toLowerCase())\r\n              && city.state_name.toLowerCase() === stateSearch.toLowerCase()\r\n              && city.military === \"TRUE\") {\r\n            return true;\r\n          }\r\n          return false;\r\n        })\r\n        .slice(0, maxResults);\r\n    }\r\n    else {\r\n      return citiesList\r\n        .filter(city => {\r\n          if (city.city.toLowerCase().includes(searchText.toLowerCase())\r\n              && city.military === \"TRUE\") {\r\n            return true;\r\n          }\r\n          return false;\r\n        })\r\n        .slice(0, maxResults);\r\n    }\r\n  }\r\n\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App'\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n"],"sourceRoot":""}