{"version":3,"sources":["MapChart.js","CityResults.js","App.js","filterCities.js","index.js"],"names":["MapChart","setTooltipContent","coords","selectCity","size","mode","selected","mapClick","geoUrl","data-tip","projection","geography","geographies","map","geo","stroke","strokeWidth","fill","onMouseEnter","properties","name","state","onMouseLeave","onClick","info","county","style","default","outline","hover","pressed","rsmKey","id","loc","city","stateID","coordinates","concat","opacity","r","memo","CityResults","lng","lat","cty","st","ct","this","props","citySelect","setInfo","className","cityData","handleClick","ID","LONGITUDE","LATITUDE","CITY","STATE_CODE","COUNTY","showMore","showLess","React","Component","App","handleSizeChange","event","setState","target","value","handleStateChange","selectedState","selectedCounty","handleSearchChange","handleCityClick","some","l","newCoords","localStorage","setItem","JSON","stringify","handleMapClick","query","isSelected","setContent","content","tooltip","viewMode","mapMode","numResults","cities","getItem","parse","err","filter","removeItem","searchText","stateSearch","countySearch","maxResults","onChange","allStates","val","countiesList","state_name","county_name","fips","type","placeholder","clearSearch","citiesList","toLowerCase","includes","STATE_NAME","slice","handleRemove","min","max","clear","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.16147507.chunk.js","sourcesContent":["import React, { memo } from \"react\";\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker\n} from \"react-simple-maps\";\n\nconst MapChart = ({setTooltipContent,\n  coords, selectCity, size, mode, selected, mapClick}) => {\n  const geoUrl =\n    \"https://raw.githubusercontent.com/LeoXu1/counties-with-states-topojson/main/\"+mode+\"TopoJson.json\";\n\n  return (\n    <>\n      <ComposableMap data-tip='' projection=\"geoAlbersUsa\">\n        <ZoomableGroup>\n          <Geographies geography={geoUrl}>\n            {({ geographies }) =>\n              geographies.map(geo => (\n                <Geography\n                  key={geo.rsmKey}\n                  stroke='#aaa'\n                  strokeWidth='0.5'\n                  geography={geo}\n                  fill={\"#d6d6d6\"}\n                  onMouseEnter={() => {\n                    if (mode === \"counties\") {\n                      setTooltipContent(geo.properties.name+\", \"+geo.properties.state);\n                    }\n                    else {\n                      setTooltipContent(geo.properties.name);\n                    }\n                  }}\n                  onMouseLeave={() => {\n                    setTooltipContent(\"\");\n                  }}\n                  onClick={() => {\n                    if (mode === \"counties\") {\n                      const info = {\n                        state: geo.properties.state,\n                        county: geo.properties.name,\n                      }\n                      mapClick(info)\n                    }\n                    else {\n                      const info = {\n                        state: geo.properties.name,\n                        county: \"\",\n                      }\n                      mapClick(info)\n                    }\n                  }}\n                  style={{\n                    default: { outline: \"none\" },\n                    hover: { outline: \"none\", fill:\"#949494\" },\n                    pressed: { outline: \"none\" },\n                  }}\n                />\n\n              ))\n            }\n          </Geographies>\n          {coords.map(({id, loc, city, stateID, county}) => (\n            <Marker\n            key = {id}\n            coordinates={loc}\n            onMouseEnter={() => {\n              const name = city.concat(\", \",stateID)\n              setTooltipContent(<div>{name} ({county})</div>);\n            }}\n            onMouseLeave={() => {\n              setTooltipContent(\"\");\n            }}\n            onClick={() => {\n              selectCity({id: id, city: city, stateID: stateID, county: county});\n            }}\n            style={\n            {\n              default: {\n                opacity: 0.5\n              },\n              hover: {\n                opacity: 1\n              }\n            }}\n            >\n            {id === selected ?\n              <circle r={size} fill=\"#FFD700\" stroke=\"#000\" strokeWidth={0.1} /> :\n              <circle r={size} fill=\"#0079d3\" stroke=\"#000\" strokeWidth={0.1} />\n\n            }\n\n            </Marker>\n          ))}\n        </ZoomableGroup>\n      </ComposableMap>\n    </>\n  );\n};\n\nexport default memo(MapChart);\n","import React from 'react';\nimport \"./CityResults.css\"\n\nexport default class CityResults extends React.Component {\n\n  handleClick(id, lng, lat, cty, st, ct) {\n    const info = {\n      id: id,\n      loc: [lng, lat],\n      city: cty,\n      stateID: st,\n      county: ct,\n    }\n    this.props.citySelect(info)\n    this.props.setInfo(info)\n  }\n\n  render() {\n    return (\n      <div className=\"resultsList\">\n        {this.props.cityData.map(cityData => (\n          <div\n          key={cityData.ID}\n          onClick={() => this.handleClick(cityData.ID, cityData.LONGITUDE,\n            cityData.LATITUDE, cityData.CITY, cityData.STATE_CODE,\n            cityData.COUNTY)}\n          className=\"cityEntry\">\n            <h4>{cityData.CITY}, {cityData.STATE_CODE} ({cityData.COUNTY})</h4>\n          </div>\n        ))}\n        <button onClick={this.props.showMore}>Show More</button>\n        <button onClick={this.props.showLess}>Show Less</button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport './App.css';\nimport \"./styles.css\";\nimport MapChart from \"./MapChart\";\nimport filterCities from \"./filterCities\"\nimport CityResults from \"./CityResults\"\nimport allStates from \"./data/allStates.json\"\nimport countiesList from \"./data/countiesList\"\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewMode: \"list\",\n      mapMode: \"states\",\n      tooltip: \"\",\n      size: 3,\n      coords: [],\n      query: \"\",\n      selectedState: \"\",\n      selectedCounty: \"\",\n      numResults: 20,\n      city: \"New York\",\n      stateID: \"NY\",\n      county: \"New York\",\n      id: \"\",\n      isSelected: false\n    };\n  }\n\n  componentDidMount() {\n    if (!localStorage) {\n      this.setState({\n        coords: []\n      })\n    }\n    else {\n      try {\n        const cities = localStorage.getItem('cities') || ''\n        this.setState({\n          coords: JSON.parse(cities)\n        })\n      }\n      catch (err) {\n        this.setState({\n          coords: []\n        })\n      }\n\n    }\n\n  }\n\n  handleSizeChange = event => {\n    this.setState({\n      size: event.target.value\n    })\n  }\n\n  handleStateChange = event => {\n    if (event.target.value === \"Select state\") {\n      this.setState({\n        selectedState: \"\",\n        selectedCounty: \"\"\n      })\n    }\n    else {\n      this.setState({\n        selectedState: event.target.value,\n        selectedCounty: \"\"\n      })\n    }\n  }\n\n  handleSearchChange = event => {\n    if (event.target.name === \"selectedCounty\" && event.target.value === \"Select county\") {\n      this.setState({\n        ...this.state,\n        selectedCounty: \"\"\n      });\n    }\n    else {\n      this.setState({\n        ...this.state,\n        [event.target.name]: event.target.value\n      });\n    }\n  };\n\n  handleCityClick = loc => {\n    if (!this.state.coords.some((l) => l.id === loc.id)) {\n      const newCoords = this.state.coords.concat(loc)\n      this.setState({\n        coords: newCoords,\n      });\n      localStorage.setItem(\"cities\", JSON.stringify(newCoords))\n    }\n  };\n\n  handleMapClick = info => {\n    this.setState({\n      selectedState: info.state,\n      selectedCounty: info.county,\n      query: \"\"\n    });\n  }\n\n  handleRemove(id) {\n    const newCoords = this.state.coords.filter(cty => cty.id !== id)\n    this.setState({\n      coords: newCoords,\n      isSelected: false\n    });\n    localStorage.setItem(\"cities\", JSON.stringify(newCoords))\n  };\n\n  setInfo = info => {\n    this.setState({\n      city: info.city,\n      stateID: info.stateID,\n      county: info.county,\n      id: info.id,\n      isSelected: true\n    });\n  }\n\n  setContent = content => {\n    this.setState({\n      tooltip: content\n    })\n  }\n\n  clear() {\n    localStorage.removeItem(\"cities\");\n    this.setState({\n      coords: [],\n      isSelected: false\n    })\n  }\n\n  clearSearch() {\n    this.setState({\n      query: \"\",\n      selectedState: \"\",\n      selectedCounty: \"\"\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"header\">\n          <select name=\"selectedState\" value={this.state.selectedState} onChange={this.handleStateChange}>\n            {allStates.map(state => (\n              <option key={state.val}>{state.id}</option>\n            ))}\n          </select>\n          {this.state.selectedState === \"\" ? (\n            null\n          ) : (\n            <>\n              <select name=\"selectedCounty\" value={this.state.selectedCounty} onChange={this.handleSearchChange}>\n                {countiesList.filter(county => county.state_name === this.state.selectedState)\n                  .map(county => (\n                  <option key={county.fips}>{county.county_name}</option>\n                ))}\n              </select>\n            </>\n          )}\n        </div>\n        <div className=\"header\">\n          <input type=\"text\" placeholder=\"Search city\" value={this.state.query} name=\"query\" onChange={this.handleSearchChange}/>\n          <button onClick={()=>this.clearSearch()}>Clear Search</button>\n        </div>\n        <select name=\"viewMode\" onChange={this.handleSearchChange}>\n              <option>list</option>\n              <option>map</option>\n        </select>\n        {this.state.viewMode === \"list\" ? (\n          <>\n            <CityResults\n              citySelect={this.handleCityClick}\n              setInfo={this.setInfo}\n              cityData={filterCities(this.state.query,this.state.selectedState, this.state.selectedCounty,\n                this.state.numResults)}\n              showMore={() => this.setState({numResults: this.state.numResults + 10})}\n              showLess={() => this.setState({numResults: this.state.numResults - 10})}\n            />\n          </>\n        ) : (\n          <>\n            <div className=\"container\">\n              <div className=\"header\">\n                <select name=\"mapMode\" onChange={this.handleSearchChange}>\n                  <option>states</option>\n                  <option>counties</option>\n                </select>\n                {this.state.isSelected && <button onClick={() => this.handleRemove(this.state.id)}>Delete</button>}\n                <div className=\"form\">\n                  <label>Size: </label>\n                  <input type=\"range\" id=\"size\" value={this.state.size} name=\"size\" min=\"1\" max=\"20\" onChange={this.handleSizeChange}/>\n                </div>\n              </div>\n              <div className=\"header\">\n                <h5>{this.state.tooltip}</h5>\n                <button onClick={()=>this.clear()}>Clear Cities</button>\n              </div>\n              <div className=\"mapHolder\">\n                <MapChart\n                  coords={this.state.coords}\n                  setTooltipContent={this.setContent}\n                  selectCity={this.setInfo}\n                  size={this.state.size}\n                  mode={this.state.mapMode}\n                  selected={this.state.id}\n                  mapClick={this.handleMapClick}\n                />\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n","import citiesList from \"./data/citiesList.json\";\n\nexport default function filterCities(searchText, stateSearch, countySearch, maxResults) {\n  if (stateSearch !== \"\") {\n    if (countySearch !== \"\") {\n      return citiesList\n        .filter(city => {\n          if (city.CITY.toLowerCase().includes(searchText.toLowerCase())\n              && city.STATE_NAME.toLowerCase() === stateSearch.toLowerCase()\n              && countySearch.toLowerCase() === city.COUNTY.toLowerCase()) {\n            return true;\n          }\n          return false;\n        })\n        .slice(0, maxResults);\n    }\n    else {\n      return citiesList\n        .filter(city => {\n          if (city.CITY.toLowerCase().includes(searchText.toLowerCase())\n              && city.STATE_NAME.toLowerCase() === stateSearch.toLowerCase()) {\n            return true;\n          }\n          return false;\n        })\n        .slice(0, maxResults);\n    }\n\n  }\n  else {\n    return citiesList\n      .filter(city => {\n        if (city.CITY.toLowerCase().includes(searchText.toLowerCase())) {\n          return true;\n        }\n        return false;\n      })\n      .slice(0, maxResults);\n  }\n\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}