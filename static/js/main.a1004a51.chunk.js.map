{"version":3,"sources":["MapChart.js","App.js","index.js"],"names":["MapChart","setTooltipContent","data-tip","projection","geography","geographies","map","geo","stroke","stroke-width","onMouseEnter","name","properties","onMouseLeave","style","default","fill","outline","hover","pressed","rsmKey","memo","App","useState","content","setContent","class","rootElement","document","getElementById","ReactDOM","render"],"mappings":"oPAqBMA,EAAW,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,kBAClB,OACE,mCACE,cAAC,gBAAD,CAAeC,WAAS,GAAGC,WAAW,eAAtC,SACE,cAAC,gBAAD,UACE,cAAC,cAAD,CAAaC,UAjBrB,4DAiBQ,SACG,qBAAGC,YACUC,KAAI,SAAAC,GAAG,OACjB,cAAC,YAAD,CAEEC,OAAO,OACPC,eAAa,MACbL,UAAWG,EACXG,aAAc,WAAO,IACXC,EAASJ,EAAIK,WAAbD,KACRV,EAAkB,GAAD,OAAIU,KAEvBE,aAAc,WACZZ,EAAkB,KAEpBa,MAAO,CACLC,QAAS,CACPC,KAAM,UACNC,QAAS,QAEXC,MAAO,CACLF,KAAM,OACNC,QAAS,QAEXE,QAAS,CACPH,KAAM,OACNC,QAAS,UAtBRV,EAAIa,qBAoCZC,iBAAKrB,GC/CLsB,MAbf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNC,EADM,KACGC,EADH,KAEb,OACE,gCACE,qCACA,sBAAKC,MAAM,YAAX,UACE,cAAC,EAAD,CAAUzB,kBAAmBwB,IAC7B,cAAC,IAAD,UAAeD,WCRjBG,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,cAAC,EAAD,IAASJ,K","file":"static/js/main.a1004a51.chunk.js","sourcesContent":["import React, { memo } from \"react\";\r\nimport {\r\n  ZoomableGroup,\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography\r\n} from \"react-simple-maps\";\r\n\r\nconst geoUrl =\r\n  \"https://cdn.jsdelivr.net/npm/us-atlas@3/counties-10m.json\";\r\n\r\nconst rounded = num => {\r\n  if (num > 1000000000) {\r\n    return Math.round(num / 100000000) / 10 + \"Bn\";\r\n  } else if (num > 1000000) {\r\n    return Math.round(num / 100000) / 10 + \"M\";\r\n  } else {\r\n    return Math.round(num / 100) / 10 + \"K\";\r\n  }\r\n};\r\n\r\nconst MapChart = ({ setTooltipContent }) => {\r\n  return (\r\n    <>\r\n      <ComposableMap data-tip=\"\" projection=\"geoAlbersUsa\">\r\n        <ZoomableGroup>\r\n          <Geographies geography={geoUrl}>\r\n            {({ geographies }) =>\r\n              geographies.map(geo => (\r\n                <Geography\r\n                  key={geo.rsmKey}\r\n                  stroke='#aaa'\r\n                  stroke-width='0.5'\r\n                  geography={geo}\r\n                  onMouseEnter={() => {\r\n                    const { name } = geo.properties;\r\n                    setTooltipContent(`${name}`);\r\n                  }}\r\n                  onMouseLeave={() => {\r\n                    setTooltipContent(\"\");\r\n                  }}\r\n                  style={{\r\n                    default: {\r\n                      fill: \"#D6D6DA\",\r\n                      outline: \"none\"\r\n                    },\r\n                    hover: {\r\n                      fill: \"#F53\",\r\n                      outline: \"none\"\r\n                    },\r\n                    pressed: {\r\n                      fill: \"#E42\",\r\n                      outline: \"none\"\r\n                    }\r\n                  }}\r\n                />\r\n\r\n              ))\r\n            }\r\n          </Geographies>\r\n        </ZoomableGroup>\r\n      </ComposableMap>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(MapChart);\r\n","import React, { useState } from \"react\";\nimport ReactTooltip from \"react-tooltip\";\nimport './App.css';\nimport \"./styles.css\";\nimport MapChart from \"./MapChart\";\n\nfunction App() {\n  const [content, setContent] = useState(\"\");\n  return (\n    <div>\n      <h1>Map</h1>\n      <div class=\"container\">\n        <MapChart setTooltipContent={setContent} />\n        <ReactTooltip>{content}</ReactTooltip>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}