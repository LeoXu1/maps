{"version":3,"sources":["MapChart.js","CityResults.js","App.js","filterCities.js","index.js"],"names":["MapChart","setTooltipContent","coords","selectCity","size","mode","selected","mapClick","geoUrl","data-tip","projection","geography","geographies","map","geo","stroke","strokeWidth","fill","onMouseEnter","properties","name","state","onMouseLeave","onClick","info","county","style","default","outline","hover","pressed","rsmKey","id","loc","city","stateID","military","coordinates","concat","opacity","r","memo","CityResults","lng","lat","cty","st","ct","this","props","citySelect","setInfo","className","cityData","handleClick","ID","LONGITUDE","LATITUDE","CITY","STATE_CODE","COUNTY","React","Component","App","handleSizeChange","event","setState","target","value","handleStateChange","selectedState","selectedCounty","handleSearchChange","handleCityClick","some","l","newCoords","handleMapClick","query","isSelected","setContent","content","tooltip","numResults","localStorage","cities","getItem","JSON","parse","err","filter","removeItem","setItem","stringify","searchText","stateSearch","countySearch","maxResults","type","onChange","allStates","val","countiesList","state_name","county_name","fips","step","clear","clearSearch","save","citiesList","toLowerCase","includes","STATE_NAME","slice","handleRemove","min","max","for","multiline","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.3a5620f2.chunk.js","sourcesContent":["import React, { memo } from \"react\";\r\nimport {\r\n  ZoomableGroup,\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography,\r\n  Marker\r\n} from \"react-simple-maps\";\r\n\r\nconst MapChart = ({setTooltipContent,\r\n  coords, selectCity, size, mode, selected, mapClick}) => {\r\n  const geoUrl =\r\n    \"https://raw.githubusercontent.com/LeoXu1/counties-with-states-topojson/main/\"+mode+\"TopoJson.json\";\r\n\r\n  return (\r\n    <>\r\n      <ComposableMap data-tip='' projection=\"geoAlbersUsa\">\r\n        <ZoomableGroup>\r\n          <Geographies geography={geoUrl}>\r\n            {({ geographies }) =>\r\n              geographies.map(geo => (\r\n                <Geography\r\n                  key={geo.rsmKey}\r\n                  stroke='#aaa'\r\n                  strokeWidth='0.5'\r\n                  geography={geo}\r\n                  fill={\"#d6d6d6\"}\r\n                  onMouseEnter={() => {\r\n                    if (mode === \"counties\") {\r\n                      setTooltipContent(geo.properties.name+\", \"+geo.properties.state);\r\n                    }\r\n                    else {\r\n                      setTooltipContent(geo.properties.name);\r\n                    }\r\n                  }}\r\n                  onMouseLeave={() => {\r\n                    setTooltipContent(\"\");\r\n                  }}\r\n                  onClick={() => {\r\n                    if (mode === \"counties\") {\r\n                      const info = {\r\n                        state: geo.properties.state,\r\n                        county: geo.properties.name,\r\n                      }\r\n                      mapClick(info)\r\n                    }\r\n                    else {\r\n                      const info = {\r\n                        state: geo.properties.name,\r\n                        county: \"\",\r\n                      }\r\n                      mapClick(info)\r\n                    }\r\n                  }}\r\n                  style={{\r\n                    default: { outline: \"none\" },\r\n                    hover: { outline: \"none\", fill:\"#949494\" },\r\n                    pressed: { outline: \"none\" },\r\n                  }}\r\n                />\r\n\r\n              ))\r\n            }\r\n          </Geographies>\r\n          {coords.map(({id, loc, city, stateID, county, military}) => (\r\n            <Marker\r\n            key = {id}\r\n            coordinates={loc}\r\n            onMouseEnter={() => {\r\n              const name = city.concat(\", \",stateID,)\r\n              const mil = military === \"TRUE\"\r\n              if (mil){\r\n                setTooltipContent(<div>{name}<br />{county}<br />Military base</div>);\r\n              } else {\r\n                setTooltipContent(<div>{name}<br />{county}</div>);\r\n              }\r\n            }}\r\n            onMouseLeave={() => {\r\n              setTooltipContent(\"\");\r\n            }}\r\n            onClick={() => {\r\n              selectCity({id: id, city: city, stateID: stateID, county: county, military: military});\r\n              setTooltipContent(\"\");\r\n            }}\r\n            style={\r\n            {\r\n              default: {\r\n                opacity: 0.5\r\n              },\r\n              hover: {\r\n                opacity: 1\r\n              }\r\n            }}\r\n            >\r\n            {id === selected ?\r\n              <circle r={size} fill=\"#FFD700\" stroke=\"#000\" strokeWidth={0.1} /> :\r\n              <circle r={size} fill=\"#0079d3\" stroke=\"#000\" strokeWidth={0.1} />\r\n\r\n            }\r\n\r\n            </Marker>\r\n          ))}\r\n        </ZoomableGroup>\r\n      </ComposableMap>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(MapChart);\r\n","import React from 'react';\r\nimport \"./CityResults.css\"\r\n\r\nexport default class CityResults extends React.Component {\r\n\r\n  handleClick(id, lng, lat, cty, st, ct) {\r\n    const info = {\r\n      id: id,\r\n      loc: [lng, lat],\r\n      city: cty,\r\n      stateID: st,\r\n      county: ct,\r\n    }\r\n    this.props.citySelect(info)\r\n    this.props.setInfo(info)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"resultsList\">\r\n        {this.props.cityData.map(cityData => (\r\n          <div\r\n          key={cityData.ID}\r\n          onClick={() => this.handleClick(cityData.ID, cityData.LONGITUDE,\r\n            cityData.LATITUDE, cityData.CITY, cityData.STATE_CODE,\r\n            cityData.COUNTY)}\r\n          className=\"cityEntry\">\r\n            <h5>{cityData.CITY}, {cityData.STATE_CODE}</h5>\r\n            <h5>{cityData.COUNTY}</h5>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport './App.css';\r\nimport \"./styles.css\";\r\nimport MapChart from \"./MapChart\";\r\nimport filterCities from \"./filterCities\"\r\nimport CityResults from \"./CityResults\"\r\nimport allStates from \"./allStates.json\"\r\nimport countiesList from \"./countiesList\"\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      mode: \"states\",\r\n      tooltip: \"\",\r\n      size: 3,\r\n      coords: [],\r\n      query: \"\",\r\n      selectedState: \"\",\r\n      selectedCounty: \"\",\r\n      numResults: 20,\r\n      city: \"New York\",\r\n      stateID: \"NY\",\r\n      county: \"New York\",\r\n      id: \"\",\r\n      isSelected: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (!localStorage) {\r\n      this.setState({\r\n        coords: []\r\n      })\r\n    }\r\n    else {\r\n      try {\r\n        const cities = localStorage.getItem('cities') || ''\r\n        this.setState({\r\n          coords: JSON.parse(cities)\r\n        })\r\n      }\r\n      catch (err) {\r\n        this.setState({\r\n          coords: []\r\n        })\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n  handleSizeChange = event => {\r\n    this.setState({\r\n      size: event.target.value\r\n    })\r\n  }\r\n\r\n  handleStateChange = event => {\r\n    this.setState({\r\n      selectedState: event.target.value,\r\n      selectedCounty: \"\"\r\n    })\r\n  }\r\n\r\n  handleSearchChange = event => {\r\n    this.setState({\r\n      ...this.state,\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  handleCityClick = loc => {\r\n    if (!this.state.coords.some((l) => l.id === loc.id)) {\r\n      const newCoords = this.state.coords.concat(loc)\r\n      this.setState({\r\n        coords: newCoords,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleMapClick = info => {\r\n    this.setState({\r\n      selectedState: info.state,\r\n      selectedCounty: info.county,\r\n      query: \"\"\r\n    })\r\n  }\r\n\r\n  handleRemove(id) {\r\n    const newCoords = this.state.coords.filter(cty => cty.id !== id)\r\n    this.setState({\r\n      coords: newCoords,\r\n      isSelected: false\r\n    });\r\n  };\r\n\r\n  setInfo = info => {\r\n    this.setState({\r\n      city: info.city,\r\n      stateID: info.stateID,\r\n      county: info.county,\r\n      id: info.id,\r\n      isSelected: true\r\n    });\r\n  }\r\n\r\n  setContent = content => {\r\n    this.setState({\r\n      tooltip: content\r\n    })\r\n  }\r\n\r\n  clear() {\r\n    localStorage.removeItem(\"cities\");\r\n    this.setState({\r\n      coords: [],\r\n      isSelected: false\r\n    })\r\n  }\r\n\r\n  save() {\r\n    localStorage.setItem(\"cities\", JSON.stringify(this.state.coords))\r\n  }\r\n\r\n  clearSearch() {\r\n    this.setState({\r\n      query: \"\",\r\n      selectedState: \"\",\r\n      selectedCounty: \"\"\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"base\">\r\n        <div className=\"container\">\r\n          <h1>Search</h1>\r\n          <div className=\"header\">\r\n            <div className=\"form\">\r\n              <label>City: </label>\r\n              <input type=\"text\" value={this.state.query} name=\"query\" onChange={this.handleSearchChange}/>\r\n            </div>\r\n            <div className=\"form\">\r\n              <label>State:</label>\r\n              <select name=\"selectedState\" value={this.state.selectedState} onChange={this.handleStateChange}>\r\n                {allStates.map(state => (\r\n                  <option key={state.val}>{state.id}</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <div className=\"header\">\r\n            <div className=\"form\">\r\n              <label>County: </label>\r\n              <select name=\"selectedCounty\" value={this.state.selectedCounty} onChange={this.handleSearchChange}>\r\n                {countiesList.filter(county => county.state_name === this.state.selectedState)\r\n                  .map(county => (\r\n                  <option key={county.fips}>{county.county_name}</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div className=\"form\">\r\n              <label>Results: </label>\r\n              <input type=\"number\" step={10} value={this.state.numResults} name=\"numResults\" onChange={this.handleSearchChange} />\r\n            </div>\r\n          </div>\r\n          <div className=\"header\">\r\n            <button onClick={()=>this.clear()}>Clear Cities</button>\r\n            <button onClick={()=>this.clearSearch()}>Clear Search</button>\r\n            <button onClick={()=>this.save()}>Save</button>\r\n          </div>\r\n          <CityResults\r\n          citySelect={this.handleCityClick}\r\n          setInfo={this.setInfo}\r\n          cityData={filterCities(this.state.query,this.state.selectedState, this.state.selectedCounty,\r\n            this.state.numResults)}\r\n          />\r\n        </div>\r\n        <div className=\"container\">\r\n        <h1>Map</h1>\r\n          {this.state.isSelected ? (\r\n            <>\r\n              <div className=\"header\">\r\n                <span>{this.state.city}, {this.state.stateID}</span>\r\n                <select name=\"mode\" onChange={this.handleSearchChange}>\r\n                  <option>states</option>\r\n                  <option>counties</option>\r\n                </select>\r\n                <button onClick={() => this.handleRemove(this.state.id)}>Delete</button>\r\n                <div className=\"form\">\r\n                  <label>Size: </label>\r\n                  <input type=\"range\" id=\"size\" value={this.state.size} name=\"size\" min=\"1\" max=\"20\" onChange={this.handleSizeChange}/>\r\n                </div>\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <div className=\"header\">\r\n                <span>No city selected</span>\r\n                <select name=\"mode\" onChange={this.handleSearchChange}>\r\n                  <option>states</option>\r\n                  <option>counties</option>\r\n                </select>\r\n                <div className=\"form\">\r\n                  <label for=\"size\">Size: </label>\r\n                  <input type=\"range\" id=\"size\" value={this.state.size} name=\"size\" min=\"1\" max=\"20\" onChange={this.handleSizeChange}/>\r\n                </div>\r\n              </div>\r\n            </>\r\n          )}\r\n          <MapChart\r\n          coords={this.state.coords}\r\n          setTooltipContent={this.setContent}\r\n          selectCity={this.setInfo}\r\n          size={this.state.size}\r\n          mode={this.state.mode}\r\n          selected={this.state.id}\r\n          mapClick={this.handleMapClick}\r\n          />\r\n          <ReactTooltip multiline={true}>{this.state.tooltip}</ReactTooltip>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import citiesList from \"./citiesList.json\";\r\n\r\nexport default function filterCities(searchText, stateSearch, countySearch, maxResults) {\r\n  if (stateSearch !== \"\") {\r\n    if (countySearch !== \"\") {\r\n      return citiesList\r\n        .filter(city => {\r\n          if (city.CITY.toLowerCase().includes(searchText.toLowerCase())\r\n              && city.STATE_NAME.toLowerCase() === stateSearch.toLowerCase()\r\n              && countySearch.toLowerCase().includes(city.COUNTY.toLowerCase())) {\r\n            return true;\r\n          }\r\n          return false;\r\n        })\r\n        .slice(0, maxResults);\r\n    }\r\n    else {\r\n      return citiesList\r\n        .filter(city => {\r\n          if (city.CITY.toLowerCase().includes(searchText.toLowerCase())\r\n              && city.STATE_NAME.toLowerCase() === stateSearch.toLowerCase()) {\r\n            return true;\r\n          }\r\n          return false;\r\n        })\r\n        .slice(0, maxResults);\r\n    }\r\n\r\n  }\r\n  else {\r\n    return citiesList\r\n      .filter(city => {\r\n        if (city.CITY.toLowerCase().includes(searchText.toLowerCase())) {\r\n          return true;\r\n        }\r\n        return false;\r\n      })\r\n      .slice(0, maxResults);\r\n  }\r\n\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App'\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n"],"sourceRoot":""}